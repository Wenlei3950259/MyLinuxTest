<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.demo.mapper.RoleMapper">
  <resultMap id="BaseResultMap" type="com.demo.dto.RoleDTO">
    <!--@mbg.generated-->
    <!--@Table `role`-->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="user_id" jdbcType="VARCHAR" property="userId" />
    <result column="department_id" jdbcType="VARCHAR" property="departmentId" />
    <result column="job_id" jdbcType="VARCHAR" property="jobId" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    id, user_id, department_id, job_id
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--@mbg.generated-->
    select 
    <include refid="Base_Column_List" />
    from `role`
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    <!--@mbg.generated-->
    delete from `role`
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.demo.dto.RoleDTO" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into `role` (user_id, department_id, job_id
      )
    values (#{userId,jdbcType=VARCHAR}, #{departmentId,jdbcType=VARCHAR}, #{jobId,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.demo.dto.RoleDTO" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into `role`
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null and userId != ''">
        user_id,
      </if>
      <if test="departmentId != null and departmentId != ''">
        department_id,
      </if>
      <if test="jobId != null and jobId != ''">
        job_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null and userId != ''">
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="departmentId != null and departmentId != ''">
        #{departmentId,jdbcType=VARCHAR},
      </if>
      <if test="jobId != null and jobId != ''">
        #{jobId,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.demo.dto.RoleDTO">
    <!--@mbg.generated-->
    update `role`
    <set>
      <if test="userId != null and userId != ''">
        user_id = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="departmentId != null and departmentId != ''">
        department_id = #{departmentId,jdbcType=VARCHAR},
      </if>
      <if test="jobId != null and jobId != ''">
        job_id = #{jobId,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.demo.dto.RoleDTO">
    <!--@mbg.generated-->
    update `role`
    set user_id = #{userId,jdbcType=VARCHAR},
      department_id = #{departmentId,jdbcType=VARCHAR},
      job_id = #{jobId,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateBatch" parameterType="java.util.List">
    <!--@mbg.generated-->
    update `role`
    <trim prefix="set" suffixOverrides=",">
      <trim prefix="user_id = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=BIGINT} then #{item.userId,jdbcType=VARCHAR}
        </foreach>
      </trim>
      <trim prefix="department_id = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=BIGINT} then #{item.departmentId,jdbcType=VARCHAR}
        </foreach>
      </trim>
      <trim prefix="job_id = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=BIGINT} then #{item.jobId,jdbcType=VARCHAR}
        </foreach>
      </trim>
    </trim>
    where id in
    <foreach close=")" collection="list" item="item" open="(" separator=", ">
      #{item.id,jdbcType=BIGINT}
    </foreach>
  </update>
  <update id="updateBatchSelective" parameterType="java.util.List">
    <!--@mbg.generated-->
    update `role`
    <trim prefix="set" suffixOverrides=",">
      <trim prefix="user_id = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.userId != null">
            when id = #{item.id,jdbcType=BIGINT} then #{item.userId,jdbcType=VARCHAR}
          </if>
        </foreach>
      </trim>
      <trim prefix="department_id = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.departmentId != null">
            when id = #{item.id,jdbcType=BIGINT} then #{item.departmentId,jdbcType=VARCHAR}
          </if>
        </foreach>
      </trim>
      <trim prefix="job_id = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.jobId != null">
            when id = #{item.id,jdbcType=BIGINT} then #{item.jobId,jdbcType=VARCHAR}
          </if>
        </foreach>
      </trim>
    </trim>
    where id in
    <foreach close=")" collection="list" item="item" open="(" separator=", ">
      #{item.id,jdbcType=BIGINT}
    </foreach>
  </update>
  <insert id="batchInsert" keyColumn="id" keyProperty="id" parameterType="map" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into `role`
    (user_id, department_id, job_id)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.userId,jdbcType=VARCHAR}, #{item.departmentId,jdbcType=VARCHAR}, #{item.jobId,jdbcType=VARCHAR}
        )
    </foreach>
  </insert>
  <insert id="insertOrUpdate" keyColumn="id" keyProperty="id" parameterType="com.demo.dto.RoleDTO" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into `role`
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      user_id,
      department_id,
      job_id,
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      #{userId,jdbcType=VARCHAR},
      #{departmentId,jdbcType=VARCHAR},
      #{jobId,jdbcType=VARCHAR},
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="id != null">
        id = #{id,jdbcType=BIGINT},
      </if>
      user_id = #{userId,jdbcType=VARCHAR},
      department_id = #{departmentId,jdbcType=VARCHAR},
      job_id = #{jobId,jdbcType=VARCHAR},
    </trim>
  </insert>
  <insert id="insertOrUpdateSelective" keyColumn="id" keyProperty="id" parameterType="com.demo.dto.RoleDTO" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into `role`
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null and userId != ''">
        user_id,
      </if>
      <if test="departmentId != null and departmentId != ''">
        department_id,
      </if>
      <if test="jobId != null and jobId != ''">
        job_id,
      </if>
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="userId != null and userId != ''">
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="departmentId != null and departmentId != ''">
        #{departmentId,jdbcType=VARCHAR},
      </if>
      <if test="jobId != null and jobId != ''">
        #{jobId,jdbcType=VARCHAR},
      </if>
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="id != null">
        id = #{id,jdbcType=BIGINT},
      </if>
      <if test="userId != null and userId != ''">
        user_id = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="departmentId != null and departmentId != ''">
        department_id = #{departmentId,jdbcType=VARCHAR},
      </if>
      <if test="jobId != null and jobId != ''">
        job_id = #{jobId,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
</mapper>
